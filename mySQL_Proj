-- 1a. You need a list of all the actors who have Display the first and last names of all actors from the table actor.
SELECT 
    first_name, last_name
FROM
    actor;

-- 1b. Display the first and last name of each actor in a single column in upper case letters. Name the column Actor Name.    
select upper(concat(first_name," ", last_name)) as 'Actor Name' from actor;

-- 2a. You need to find the ID number, first name, and last name of an actor, of whom you know only the first name, "Joe." What is one query would you use to obtain this information?
select actor_id, first_name, last_name  from actor where first_name="Joe";

-- 2b. Find all actors whose last name contain the letters GEN:
select first_name, last_name from actor where last_name like "%gen%";

-- 2c. Find all actors whose last names contain the letters LI. This time, order the rows by last name and first name, in that order:
select last_name, first_name from actor where last_name like "%LI%";

-- 2d. Using IN, display the country_id and country columns of the following countries: Afghanistan, Bangladesh, and China:
select country_id, country from country where country IN ("Afghanistan", "Bangladesh","China");

-- 3a. Add a middle_name column to the table actor. Position it between first_name and last_name. Hint: you will need to specify the data type.
alter table actor add middle_name VARCHAR(45) after first_name;

-- 3b. You realize that some of these actors have tremendously long last names. Change the data type of the middle_name column to blobs.
ALTER TABLE actor MODIFY middle_name blob;

-- 3c. Now delete the middle_name column.
alter table actor drop column middle_name;
select * from actor;

-- 4a. List the last names of actors, as well as how many actors have that last name.
select last_name, count(last_name) as 'Last Name Count' from actor group by last_name ;

-- 4b. List last names of actors and the number of actors who have that last name, but only for names that are shared by at least two actors
select last_name, count(last_name) as 'Last Name Count' from actor group by last_name having `Last Name Count` >=2 ;

-- 4c. Oh, no! The actor HARPO WILLIAMS was accidentally entered in the actor table as GROUCHO WILLIAMS,
-- the name of Harpo's second cousin's husband's yoga teacher. Write a query to fix the record.
select actor_id, first_name, last_name from actor where first_name = "GROUCHO";
update actor set first_name='HARPO' where actor_id=172;
-- update actor SET first_name = 'HARPO' WHERE first_name = 'GROUCHO' and last_name = 'WILLIAMS';

-- 4d. Perhaps we were too hasty in changing GROUCHO to HARPO. It turns out that GROUCHO was the correct name 
-- after all! In a single query, if the first name of the actor is currently HARPO, change it to GROUCHO. 
-- Otherwise, change the first name to MUCHO GROUCHO, as that is exactly what the actor will be with the
--  grievous error. BE CAREFUL NOT TO CHANGE THE FIRST NAME OF EVERY ACTOR TO MUCHO GROUCHO, HOWEVER! 
-- (Hint: update the record using a unique identifier.)
update actor SET first_name = 'GROUCHO' WHERE actor_id=172;
update actor SET first_name = 'MUCHO GROUCHO' WHERE actor_id IN (78, 106);

-- 5a. You cannot locate the schema of the address table. Which query would you use to re-create it?
select `table_schema` from `information_schema`.`tables` where `table_name` = 'address';
-- show create table address

-- 6a. Use JOIN to display the first and last names, as well as the address, of each staff member. Use the tables staff and address
SELECT staff.first_name, staff.last_name, address.address
from staff
join address on staff.address_id = address.address_id;

-- 6b. Use JOIN to display the total amount rung up by each staff member in August of 2005. Use tables staff and payment
select  staff.first_name, staff.last_name, sum(payment.amount) as Total_Amount from payment
join staff on payment.staff_id = staff.staff_id
where YEAR(payment.payment_date)=2005 and MONTH(payment.payment_date)= 8
group by first_name;

-- 6c. List each film and the number of actors who are listed for that film. Use tables film_actor and film. Use inner join
select film.title, count(film_actor.film_id) as No_Actors 
from film
join film_actor 
on (film.actor_id=actor.actor)
join film 
on (film_actor.film_id=film.film_id);

-- 6d. How many copies of the film Hunchback Impossible exist in the inventory system?
select count(inventory.film_id) as Total_Inventory from inventory
join film on inventory.film_id = film.film_id
where film.title='Hunchback Impossible';

-- 6e. Using the tables payment and customer and the JOIN command, list the total paid by each customer. List the customers alphabetically by last name:
select first_name, last_name, sum(payment.amount) as 'Total Amount Paid' from customer
join payment on customer.customer_id = payment.customer_id
group by last_name
order by last_name asc;

-- 7a. The music of Queen and Kris Kristofferson have seen an unlikely resurgence. As an unintended consequence, films starting with the letters K and Q have also soared in popularity. Use subqueries to display the titles of movies starting with the letters K and Q whose language is English.
select film.title from language
join film on language.language_id = film.language_id
where (title like "K%" or title like "Q%") and name="English";

-- 7b. Use subqueries to display all actors who appear in the film Alone Trip.
select actor.first_name, actor.last_name from actor
join film_actor on actor.actor_id = film_actor.actor_id
join film on film_actor.film_id = film.film_id
where title = "Alone Trip";

-- 7c. You want to run an email marketing campaign in Canada, for which you will need the names and email addresses of all Canadian customers. Use joins to retrieve this information.
select first_name, last_name, email, country 
from customer 
join address
on (customer.address_id = address.address_id)
join city
on (address.city_id = city.city_id)
join country
on (city.country_id = country.country_id)
where country.country ='Canada';

-- 7d. Sales have been lagging among young families, and you wish to target all family movies for a promotion. Identify all movies categorized as famiy films.
select film.title from film
join film_category on film.film_id = film_category.film_id
join category on film_category.category_id = category.category_id
where category.name='family';

-- 7e. Display the most frequently rented movies in descending order.
select film.title, count(inventory.film_id) as Total_Rentals from film
join inventory on film.film_id = inventory.film_id
join rental on inventory.inventory_id = rental.inventory_id
group by title
order by Total_Rentals DESC;

-- 7f. Write a query to display how much business, in dollars, each store brought in.
select inventory.store_id, sum(payment.amount) as `Business($)` from inventory
join rental on inventory.inventory_id = rental.inventory_id
join payment on rental.rental_id = payment.rental_id
group by store_id;

-- 7g. Write a query to display for each store its store ID, city, and country.
select store.store_id, city.city, country.country from store
join address on store.address_id = address.address_id
join city on address.city_id = city.city_id
join country on city.country_id = country.country_id;


-- 7h. List the top five genres in gross revenue in descending order. (Hint: you may need to use the following tables: category, film_category, inventory, payment, and rental.)
select category.name, sum(payment.amount) as Gross_Revenue from category
join film_category on category.category_id = film_category.category_id
join inventory on film_category.film_id = inventory.film_id
join rental on inventory.inventory_id=rental.inventory_id
join payment on rental.customer_id = payment.customer_id
group by category.name
order by Gross_Revenue DESC limit 5;

-- 8a. In your new role as an executive, you would like to have an easy way of viewing the Top five genres by gross revenue. Use the solution from the problem above to create a view. If you haven't solved 7h, you can substitute another query to create a view.
Create view Gross_Revenue as
select category.name, sum(payment.amount) as Gross_Revenue from category
join film_category on category.category_id = film_category.category_id
join inventory on film_category.film_id = inventory.film_id
join rental on inventory.inventory_id=rental.inventory_id
join payment on rental.customer_id = payment.customer_id
group by category.name
order by Gross_Revenue DESC limit 5;

-- 8b. How would you display the view that you created in 8a?
SELECT * from Gross_Revenue;

-- 8c. You find that you no longer need the view top_five_genres. Write a query to delete it.
DROP VIEW Gross_Revenue;